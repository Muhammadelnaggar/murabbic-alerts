
const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;
const dataDir = path.join(__dirname, "data");
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir);
  const usersPath = path.join(dataDir, 'users.json');
  }
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'www')));


app.post('/api/calvings', (req, res) => {
  const calving = req.body;

  if (!calving.animalId || !calving.calvingDate) {
    return res.status(400).json({ error: 'โ ุจูุงูุงุช ุงูููุงุฏุฉ ุบูุฑ ููุชููุฉ' });
  }

  // ุญูุธ ุงูุญุฏุซ ูู events.json
  const eventsPath = path.join(dataDir, 'events.json');
  let events = [];

  if (fs.existsSync(eventsPath)) {
    events = JSON.parse(fs.readFileSync(eventsPath, 'utf8') || '[]');
  }

  calving.type = "ููุงุฏุฉ";
  calving.id = events.length + 1;
  events.push(calving);
  fs.writeFileSync(eventsPath, JSON.stringify(events, null, 2));

  // ุชุญุฏูุซ ููู animals.json
  const animalsPath = path.join(dataDir, 'animals.json');
  let animals = [];

  if (fs.existsSync(animalsPath)) {
    animals = JSON.parse(fs.readFileSync(animalsPath, 'utf8') || '[]');
  }

  const animal = animals.find(a => a.number === calving.animalId);
  if (animal) {
    animal.lastCalvingDate = calving.calvingDate;
    animal.reproductiveStatus = "ุญุฏูุซ ุงูููุงุฏุฉ";
    animal.dailyMilkProduction = 0;
    delete animal.lastInseminationDate;
  }

  fs.writeFileSync(animalsPath, JSON.stringify(animals, null, 2));

  res.status(200).json({ message: "โ ุชู ุชุณุฌูู ุญุฏุซ ุงูููุงุฏุฉ ูุชุญุฏูุซ ุจูุงูุงุช ุงูุญููุงู" });
});

// ููุทุฉ ุงูููุงูุฉ ูุชุณุฌูู ุงูุชุญุตููุงุช
app.post("/api/vaccinations", (req, res) => {
  const vaccination = req.body;
  const filePath = path.join(dataDir, "vaccinations.json");

  // ุชุญููู ุงูููู ุฃู ุชููุฆุฉ ูุตูููุฉ ุฌุฏูุฏุฉ
  let vaccinations = [];
  if (fs.existsSync(filePath)) {
    vaccinations = JSON.parse(fs.readFileSync(filePath));
  }

  // ุญูุธ ุงูุชุญุตูู ุงูุฌุฏูุฏ
  vaccinations.push(vaccination);
  fs.writeFileSync(filePath, JSON.stringify(vaccinations, null, 2));

  res.status(200).json({ message: "โ ุชู ุญูุธ ุงูุชุญุตูู ุจูุฌุงุญ" });
});
// ุฏุงุฎู serve.js
app.post("/api/pregnancy-diagnosis", (req, res) => {
  const newDiagnosis = req.body;

  const filePath = path.join(dataDir, "pregnancy-diagnosis.json");
  fs.readFile(filePath, "utf8", (err, data) => {
    let diagnoses = [];
    if (!err && data) {
      diagnoses = JSON.parse(data);
    }

    diagnoses.push(newDiagnosis);

    fs.writeFile(filePath, JSON.stringify(diagnoses, null, 2), (err) => {
      if (err) {
        console.error("โ ูุดู ูู ุญูุธ ุงูุชุดุฎูุต:", err);
        res.status(500).json({ success: false });
      } else {
        res.json({ success: true });
      }
    });
  });
});

// ุชุณุฌูู ุชุญุถูุฑ ุงูููุงุฏุฉ
app.post('/api/sensors', (req, res) => {
  const filePath = path.join(dataDir, 'sensor-readings.json');
  const animalsPath = path.join(dataDir, 'animals.json');
  const newEntry = req.body;

  // ุงูุชุญูู ูู ูุฌูุฏ ุงูุญููุงู ุฃูููุง
  fs.readFile(animalsPath, 'utf8', (err, animalData) => {
    if (err) {
      console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงูุญููุงูุงุช:', err);
      return res.status(500).send('ุฎุทุฃ ูู ูุฑุงุกุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุญููุงูุงุช');
    }

    let animals = [];
    try {
      animals = JSON.parse(animalData);
    } catch (e) {
      return res.status(500).send('โ ุฎุทุฃ ูู ุชุญููู ููู ุงูุญููุงูุงุช');
    }

    const found = animals.find(animal => animal.number == newEntry.animalId);


    if (!found) {
      return res.status(404).send(`โ ุงูุญููุงู ุจุฑูู ${newEntry.animalId} ุบูุฑ ููุฌูุฏ ูู ุงููุธุงู`);
    }

    // ุญูุธ ูุฑุงุกุฉ ุงูุญุณุงุณ ุจุนุฏ ุงูุชุญูู
    fs.readFile(filePath, 'utf8', (err, data) => {
      let readings = [];
      if (!err && data) {
        try {
          readings = JSON.parse(data);
        } catch (e) {
          readings = [];
        }
      }

      readings.push(newEntry);

      fs.writeFile(filePath, JSON.stringify(readings, null, 2), err => {
        if (err) {
          console.error('ุฎุทุฃ ูู ุญูุธ ูุฑุงุกุฉ ุงูุญุณุงุณ:', err);
          res.status(500).send('ูุดู ูู ุงูุญูุธ');
        } else {
          res.status(200).send('โ ุชู ุฑุจุท ู ุชุณุฌูู ูุฑุงุกุฉ ุงูุญุณุงุณ ุจูุฌุงุญ');
        }
      });
    });
  });
});


app.post('/api/closeups', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'closeups.json');
  const newRecord = req.body;

  let records = [];
  if (fs.existsSync(filePath)) {
    const data = fs.readFileSync(filePath, 'utf8');
    records = data ? JSON.parse(data) : [];
  }

  records.push(newRecord);

  fs.writeFile(filePath, JSON.stringify(records, null, 2), err => {
    if (err) {
      console.error("โ ูุดู ูู ุญูุธ ุจูุงูุงุช ุงูุชุญุถูุฑ:", err);
      return res.status(500).json({ message: 'ูุดู ูู ุญูุธ ุงูุชุญุถูุฑ' });
    }

    res.status(200).json({ message: 'โ ุชู ุญูุธ ุงูุชุญุถูุฑ ููููุงุฏุฉ ุจูุฌุงุญ' });
  });
});
// === ุชุณุฌูู ุฅูุชุงุฌ ุงููุจู ุงููููู ===
// === ุชุณุฌูู ุงููุจู ุงููููู ===
app.post('/api/dailymilk', (req, res) => {
  const filePath = path.join(dataDir, 'dailymilk.json');
  const newRecord = req.body;

  let records = [];
  if (fs.existsSync(filePath)) {
    const data = fs.readFileSync(filePath, 'utf8');
    records = data ? JSON.parse(data) : [];
  }

  records.push(newRecord);

  fs.writeFile(filePath, JSON.stringify(records, null, 2), err => {
    if (err) {
      console.error("โ ูุดู ูู ุญูุธ ุจูุงูุงุช ุงููุจู:", err);
      return res.status(500).json({ message: 'ูุดู ูู ุญูุธ ุจูุงูุงุช ุงููุจู' });
    }

    res.status(200).json({ message: 'โ ุชู ุญูุธ ุงููุจู ุงููููู ุจูุฌุงุญ' });
  });
});

// ุชุณุฌูู ุงูุชูุงุจ ุงูุถุฑุน
app.post('/api/mastitis', (req, res) => {
  const mastitisPath = path.join(dataDir, 'mastitis.json');
  const newEntry = req.body;

  fs.readFile(mastitisPath, 'utf8', (err, data) => {
    let entries = [];
    if (!err && data) entries = JSON.parse(data);
    entries.push(newEntry);

    fs.writeFile(mastitisPath, JSON.stringify(entries, null, 2), err => {
      if (err) {
        console.error('ุฎุทุฃ ูู ุงูุญูุธ:', err);
        res.status(500).send('ูุดู ูู ุญูุธ ุงูุจูุงูุงุช');
      } else {
        res.status(200).send('ุชู ุญูุธ ุงูุชูุงุจ ุงูุถุฑุน ุจูุฌุงุญ');
      }
    });
  });
});

// ุชุณุฌูู ุงูุนุฑุฌ
app.post('/api/lameness', (req, res) => {
  const lamenessPath = path.join(dataDir, 'lameness.json');
  const newEntry = req.body;

  fs.readFile(lamenessPath, 'utf8', (err, data) => {
    let entries = [];
    if (!err && data) entries = JSON.parse(data);
    entries.push(newEntry);

    fs.writeFile(lamenessPath, JSON.stringify(entries, null, 2), err => {
      if (err) {
        console.error('ุฎุทุฃ ูู ุงูุญูุธ:', err);
        res.status(500).send('ูุดู ูู ุญูุธ ุงูุจูุงูุงุช');
      } else {
        res.status(200).send('ุชู ุญูุธ ุญุงูุฉ ุงูุนุฑุฌ ุจูุฌุงุญ');
      }
    });
  });
});

app.post("/api/dryoffs", (req, res) => {
  try {
    const newData = req.body;
    console.log("๐ฆ ุงูุจูุงูุงุช ุงููุณุชููุฉ:", newData);

    const filePath = path.join(dataDir, "dryoffs.json");

    // ุงูุฑุฃ ุงูููู ุงูุญุงูู
    let existing = [];
    if (fs.existsSync(filePath)) {
      const raw = fs.readFileSync(filePath);
      existing = raw.length > 0 ? JSON.parse(raw) : [];
    }

    existing.push(newData);
    fs.writeFileSync(filePath, JSON.stringify(existing, null, 2));

    res.status(201).json({ message: "ุชู ุญูุธ ุงูุชุฌููู ุจูุฌุงุญ" });

  } catch (err) {
    console.error("โ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูุชุฌููู:", err);
    res.status(500).json({ error: "ูุดู ุงูุญูุธ", details: err.message });
  }
});



// ุชุณุฌูู ุงูุญุงูุงุช ุงูุตุญูุฉ
app.post('/api/diseases', (req, res) => {
  const filePath = path.join(dataDir, 'diseases.json');
  const newRecord = req.body;

  fs.readFile(filePath, 'utf8', (err, data) => {
    let records = [];
    if (!err && data) {
      records = JSON.parse(data);
    }
    records.push(newRecord);

    fs.writeFile(filePath, JSON.stringify(records, null, 2), err => {
      if (err) {
        res.status(500).json({ message: 'ูุดู ูู ุญูุธ ุงูุจูุงูุงุช' });
      } else {
        res.status(200).json({ message: 'ุชู ุญูุธ ุงูุญุงูุฉ ุงูุตุญูุฉ ุจูุฌุงุญ' });
      }
    });
  });
});

// POST route to save insemination event
app.post('/api/inseminations', (req, res) => {
  const newInsemination = req.body;
  const filePath = path.join(__dirname, 'data', 'inseminations.json');

  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error('ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงูุชูููุญุงุช:', err);
      return res.status(500).json({ error: 'ูุดู ูู ูุฑุงุกุฉ ุงูุจูุงูุงุช' });
    }

    let inseminations = [];
    try {
      inseminations = JSON.parse(data);
    } catch (parseErr) {
      console.error('ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช:', parseErr);
    }

    inseminations.push(newInsemination);

    fs.writeFile(filePath, JSON.stringify(inseminations, null, 2), (err) => {
      if (err) {
        console.error('ุฎุทุฃ ูู ุญูุธ ุจูุงูุงุช ุงูุชูููุญ:', err);
        return res.status(500).json({ error: 'ูุดู ูู ุญูุธ ุงูุชูููุญ' });
      }

      res.status(200).json({ message: 'ุชู ุญูุธ ุงูุชูููุญ ุจูุฌุงุญ' });
    });
  });
});

// ูุฐุง ุงูุฌุฒุก ูุฌูุจ ูู ุงูุญููุงูุงุช ุงููุณุฌูุฉ
app.get('/api/animals', (req, res) => {
  const filePath = path.join(__dirname, 'data', 'animals.json');
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error('โ ูุดู ูู ูุฑุงุกุฉ ููู ุงูุญููุงูุงุช:', err);
      return res.status(500).json({ error: 'ูุดู ูู ูุฑุงุกุฉ ุงูุจูุงูุงุช' });
    }

    try {
      const animals = JSON.parse(data);
      res.json(animals);
    } catch (parseError) {
      console.error('โ ุฎุทุฃ ูู ุชุญููู ููู JSON:', parseError);
      res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุจูุงูุงุช' });
    }
  });
});

// === ูุณุงุฑุงุช ูููุงุช ุงูุจูุงูุงุช ===


const animalsPath = path.join(dataDir, 'animals.json');
const alertsPath = path.join(dataDir, 'alerts.json');

// === ุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏ ===
app.post('/api/users', (req, res) => {
  const { name, phone, password } = req.body;
  if (!name || !phone || !password) {
    return res.status(400).json({ error: 'ุงูุจูุงูุงุช ูุงูุตุฉ' });
  }

  let users = [];
  if (fs.existsSync(usersPath)) {
    users = JSON.parse(fs.readFileSync(usersPath, 'utf8') || '[]');
  }

  if (users.find(u => u.phone === phone)) {
    return res.status(409).json({ error: 'ุฑูู ุงููุงุชู ูุณุชุฎุฏู ูุณุจููุง' });
  }

  const newUser = { id: users.length + 1, name, phone, password };
  users.push(newUser);

  fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
  res.json({ message: 'ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ', user: newUser });
});

// === ุชุณุฌูู ุงูุฏุฎูู ===
app.post('/api/users/login', (req, res) => {
  const { phone, password } = req.body;
  if (!fs.existsSync(usersPath)) return res.status(500).send("ููู ุงููุณุชุฎุฏููู ุบูุฑ ููุฌูุฏ");

  const users = JSON.parse(fs.readFileSync(usersPath, 'utf8') || '[]');
  const user = users.find(u => u.phone === phone && u.password === password);

  if (!user) return res.status(401).json({ error: 'ุจูุงูุงุช ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ' });

  res.json({ message: 'ุชู ุชุณุฌูู ุงูุฏุฎูู', user });
});

// === ุชุณุฌูู ุญููุงู ุฌุฏูุฏ ===
app.post('/api/animals', (req, res) => {
  const newAnimal = req.body;
  let animals = [];

  if (fs.existsSync(animalsPath)) {
    animals = JSON.parse(fs.readFileSync(animalsPath, 'utf8') || '[]');
  }

  newAnimal.id = animals.length + 1;
  animals.push(newAnimal);

  fs.writeFileSync(animalsPath, JSON.stringify(animals, null, 2));
  res.status(200).json({ message: 'ุชู ุชุณุฌูู ุงูุญููุงู ุจูุฌุงุญ' });
});
// === ุชุณุฌูู ุญุฏุซ (ูุซู ุงูููุงุฏุฉ) ===
// ุชุณุฌูู ุญุฏุซ ูุซู ุงูููุงุฏุฉ + ุชุญุฏูุซ ุฐูู ููุญููุงู
app.post('/api/events', (req, res) => {
  const event = req.body;

  if (!event || !event.type || !event.animalId) {
    return res.status(400).json({ error: 'ุจูุงูุงุช ุงูุญุฏุซ ูุงูุตุฉ' });
  }

  const eventsPath = path.join(dataDir, 'events.json');
  const animalsPath = path.join(dataDir, 'animals.json');

  // 1. ุชุณุฌูู ุงูุญุฏุซ ูู ููู events.json
  let events = [];
  if (fs.existsSync(eventsPath)) {
    events = JSON.parse(fs.readFileSync(eventsPath, 'utf8') || '[]');
  }
  event.id = events.length + 1;
  events.push(event);
  fs.writeFileSync(eventsPath, JSON.stringify(events, null, 2));

  // 2. ุชุนุฏูู ุจูุงูุงุช ุงูุญููุงู ุฅุฐุง ูุงู ุงูุญุฏุซ "ููุงุฏุฉ"
  if (event.type === "ููุงุฏุฉ") {
    if (fs.existsSync(animalsPath)) {
      let animals = JSON.parse(fs.readFileSync(animalsPath, 'utf8') || '[]');
      const index = animals.findIndex(a => a.number == event.animalId);

      if (index !== -1) {
        animals[index].lastCalvingDate = event.calvingDate;
        animals[index].reproductiveStatus = "ุญุฏูุซ ุงูููุงุฏุฉ";
        animals[index].dailyMilkProduction = 0;

        if (animals[index].lastInseminationDate) {
          delete animals[index].lastInseminationDate;
        }

        fs.writeFileSync(animalsPath, JSON.stringify(animals, null, 2));
      }
    }
  }

  res.status(200).json({ message: 'โ ุชู ุชุณุฌูู ุงูุญุฏุซ ูุชุญุฏูุซ ุจูุงูุงุช ุงูุญููุงู ุจูุฌุงุญ', event });
});


// === ุงุณุชุฑุฌุงุน ุชูุจููุงุช ุงููุณุชุฎุฏู ===
app.get('/alerts/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  let alerts = [];

  if (fs.existsSync(alertsPath)) {
    alerts = JSON.parse(fs.readFileSync(alertsPath, 'utf8') || '[]');
  }

  const userAlerts = alerts.filter(a => a.user_id === userId);
  res.json({ alerts: userAlerts });
});

// === ุชูุฌูู ุงูุชุฑุงุถู ูููู index.html ุนูุฏ ุฒูุงุฑุฉ /
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'www', 'index.html'));
});
app.get("/data/animal.json", (req, res) => {
  res.sendFile(path.join(dataDir, "animal.json"));
});

// === ุชุดุบูู ุงูุณูุฑูุฑ ===
app.listen(PORT, '0.0.0.0', () => {
  console.log(`โ Server running on http://localhost:${PORT}`);
});



