const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));

const eventsPath = path.join(__dirname, 'data', 'events.json');
// โ ุชุณุฌูู ุญุฏุซ ุชูููุญ
app.post('/events/insemination', (req, res) => {
  const {
    animalId,
    inseminationDate,
    inseminationType,
    bullName,
    inseminatorName
  } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      try {
        events = JSON.parse(data);
      } catch (e) {
        console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงูุฃุญุฏุงุซ:', e);
      }
    }

    const newEvent = {
      id: events.length + 1,
      type: "ุชูููุญ",
      animalId,
      inseminationDate,
      inseminationType,
      bullName,
      inseminatorName,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุงูุชูููุญ:', err);
        return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุญูุธ' });
      }

      console.log('โ ุชู ุชุณุฌูู ุงูุชูููุญ:', newEvent);
      res.status(200).json({ success: true });
    });
  });
});
// ๐ ุชุญุถูุฑ ููููุงุฏุฉ
app.post('/events/calving-prep', (req, res) => {
  const {
    animalId,
    expectedDate,
    preparationsDone,
    date
  } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      events = JSON.parse(data);
    }

    const newEvent = {
      id: events.length + 1,
      type: "ุชุญุถูุฑ ููููุงุฏุฉ",
      animalId,
      expectedDate,
      preparationsDone,
      date,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุญุฏุซ ุงูุชุญุถูุฑ ููููุงุฏุฉ:', err);
        return res.status(500).send('ุฎุทุฃ ูู ุงูุญูุธ');
      }

      console.log('โ ุชู ุชุณุฌูู ุญุฏุซ ุงูุชุญุถูุฑ ููููุงุฏุฉ:', newEvent);
      res.status(200).json({ status: 'ok' });
    });
  });
});

// โ ุชุณุฌูู ุญุฏุซ ุชุญุตูู
app.post('/events/vaccine', (req, res) => {
  const {
    animalId,
    vaccineDate,
    vaccineType,
    vaccineName,
    veterinarian,
    notes
  } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      events = JSON.parse(data);
    }

    const newEvent = {
      id: events.length + 1,
      type: "ุชุญุตูู",
      animalId,
      vaccineDate,
      vaccineType,
      vaccineName,
      veterinarian,
      notes,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error("โ ูุดู ูู ุญูุธ ุงูุชุญุตูู:", err);
        return res.status(500).send("ูุดู ูู ุญูุธ ุงูุชุญุตูู");
      }

      console.log("โ ุชู ุชุณุฌูู ุงูุชุญุตูู:", newEvent);
      res.status(200).send("OK");
    });
  });
});
// ๐ฅ ุชุณุฌูู ุฅูุชุงุฌ ุงููุจู ุงููููู
app.post('/events/milk', (req, res) => {
  const {
    animalId,
    date,
    morning,
    noon,
    evening,
    total
  } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      events = JSON.parse(data);
    }

    const newEvent = {
      id: events.length + 1,
      type: "ุฅูุชุงุฌ ุงููุจู ุงููููู",
      animalId,
      date,
      morning,
      noon,
      evening,
      total,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุฅูุชุงุฌ ุงููุจู:', err);
        return res.status(500).send('ุฎุทุฃ ูู ุงูุญูุธ');
      }

      console.log('โ ุชู ุชุณุฌูู ุฅูุชุงุฌ ุงููุจู:', newEvent);
      res.status(200).json({ status: 'ok' });
    });
  });
});
// ๐ ุชุณุฌูู ุญุฏุซ ุชุฌููู
app.post('/events/dry', (req, res) => {
  const {
    animalId,
    date,
    pregnancyConfirmed,
    udderTreatment
  } = req.body;

  if (pregnancyConfirmed !== "ุนุดุงุฑ") {
    return res.status(400).json({ error: "ูุง ูููู ุชุฌููู ุญููุงู ุบูุฑ ุนุดุงุฑ" });
  }

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      events = JSON.parse(data);
    }

    const newEvent = {
      id: events.length + 1,
      type: "ุชุฌููู",
      animalId,
      date,
      pregnancyConfirmed,
      udderTreatment,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุญุฏุซ ุงูุชุฌููู:', err);
        return res.status(500).send('ุฎุทุฃ ูู ุงูุญูุธ');
      }

      console.log('โ ุชู ุชุณุฌูู ุญุฏุซ ุงูุชุฌููู:', newEvent);
      res.status(200).json({ status: 'ok' });
    });
  });
});

// โ ุชุณุฌูู ุญุฏุซ ููุงุฏุฉ
app.post('/events', (req, res) => {
  const {
    animalId,
    birthDate,
    birthEase,
    calfGender,
    calfId,
    calfFate
  } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      try {
        events = JSON.parse(data);
      } catch (e) {
        console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงูุฃุญุฏุงุซ:', e);
      }
    }

    const newEvent = {
      id: events.length + 1,
      type: "ููุงุฏุฉ",
      animalId,
      birthDate,
      birthEase,
      calfGender,
      calfId,
      calfFate,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุงูุญุฏุซ:', err);
        return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุญูุธ' });
      }

      console.log('โ ุชู ุชุณุฌูู ุญุฏุซ ุงูููุงุฏุฉ:', newEvent);
      res.status(200).json({ success: true });
    });
  });
});
// โ ุงุณุชูุจุงู ุจูุงูุงุช ูุฑุถ
app.post('/events/disease', (req, res) => {
  const { animalId, diseaseDate, diseaseName, notes } = req.body;

  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      events = JSON.parse(data);
    }

    const newDisease = {
      id: events.length + 1,
      type: "ูุฑุถ",
      animalId,
      diseaseDate,
      diseaseName,
      notes,
      timestamp: new Date().toISOString()
    };

    events.push(newDisease);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุงููุฑุถ:', err);
        return res.status(500).send('ูุดู ูู ุงูุญูุธ');
      }

      console.log('โ ุชู ุชุณุฌูู ุงููุฑุถ:', newDisease);
      res.status(200).json({ status: 'ok' });
    });
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`โ ุงูุณูุฑูุฑ ูุนูู ุนูู http://localhost:${PORT}`);
});
