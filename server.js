const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

const eventsPath = path.join(__dirname, 'data', 'events.json');
const animalsPath = path.join(__dirname, 'data', 'animal.json');

// ๐ฎ ุชุณุฌูู ุญููุงู ุฌุฏูุฏ
app.post('/api/animals', (req, res) => {
  const newAnimal = req.body;

  fs.readFile(animalsPath, 'utf8', (err, data) => {
    let animals = [];
    if (!err && data) {
      try {
        animals = JSON.parse(data);
      } catch (e) {
        animals = [];
      }
    }

    newAnimal.id = animals.length + 1;
    animals.push(newAnimal);

    fs.writeFile(animalsPath, JSON.stringify(animals, null, 2), (err) => {
      if (err) return res.status(500).send('ูุดู ูู ุญูุธ ุงูุญููุงู');
      res.status(200).json({ message: 'ุชู ุชุณุฌูู ุงูุญููุงู ุจูุฌุงุญ' });
    });
  });
});

// ๐ผ ููุงุฏุฉ
app.post('/events', (req, res) => {
  const { animalId, birthDate, birthEase, calfGender, calfId, calfFate } = req.body;
  registerEvent({ type: "ููุงุฏุฉ", animalId, birthDate, birthEase, calfGender, calfId, calfFate }, res);
});

// ๐ ุชูููุญ
app.post('/events/insemination', (req, res) => {
  const { animalId, inseminationDate, inseminationType, bullName, inseminatorName } = req.body;
  registerEvent({ type: "ุชูููุญ", animalId, inseminationDate, inseminationType, bullName, inseminatorName }, res);
});

// ๐งช ุชุญุถูุฑ ููููุงุฏุฉ
app.post('/events/calving-prep', (req, res) => {
  const { animalId, expectedDate, preparationsDone, date } = req.body;
  registerEvent({ type: "ุชุญุถูุฑ ููููุงุฏุฉ", animalId, expectedDate, preparationsDone, date }, res);
});

// ๐ก๏ธ ุชุญุตูู
app.post('/events/vaccine', (req, res) => {
  const { animalId, vaccineDate, vaccineType, vaccineName, veterinarian, notes } = req.body;
  registerEvent({ type: "ุชุญุตูู", animalId, vaccineDate, vaccineType, vaccineName, veterinarian, notes }, res);
});

// ๐ฅ ุฅูุชุงุฌ ุงููุจู
app.post('/events/milk', (req, res) => {
  const { animalId, date, morning, noon, evening, total } = req.body;
  registerEvent({ type: "ุฅูุชุงุฌ ุงููุจู ุงููููู", animalId, date, morning, noon, evening, total }, res);
});

// ๐งผ ุชุฌููู
app.post('/events/dry', (req, res) => {
  const { animalId, date, pregnancyConfirmed, udderTreatment } = req.body;
  if (pregnancyConfirmed !== "ุนุดุงุฑ") return res.status(400).json({ error: "ูุง ูููู ุชุฌููู ุญููุงู ุบูุฑ ุนุดุงุฑ" });
  registerEvent({ type: "ุชุฌููู", animalId, date, pregnancyConfirmed, udderTreatment }, res);
});

// ๐งซ ูุฑุถ
app.post('/events/disease', (req, res) => {
  const { animalId, diseaseDate, diseaseName, notes } = req.body;
  registerEvent({ type: "ูุฑุถ", animalId, diseaseDate, diseaseName, notes }, res);
});

// โจ ุฏุงูุฉ ุนุงูุฉ ูุชุณุฌูู ุฃู ุญุฏุซ
function registerEvent(eventData, res) {
  fs.readFile(eventsPath, 'utf8', (err, data) => {
    let events = [];
    if (!err && data) {
      try { events = JSON.parse(data); } catch (e) { events = []; }
    }

    const newEvent = {
      id: events.length + 1,
      ...eventData,
      timestamp: new Date().toISOString()
    };

    events.push(newEvent);

    fs.writeFile(eventsPath, JSON.stringify(events, null, 2), (err) => {
      if (err) {
        console.error('โ ูุดู ูู ุญูุธ ุงูุญุฏุซ:', err);
        return res.status(500).json({ error: 'ุฎุทุฃ ูู ุงูุญูุธ' });
      }

      console.log(`โ ุชู ุชุณุฌูู ุงูุญุฏุซ: ${eventData.type}`, newEvent);
      res.status(200).json({ success: true });
    });
  });
}
// โ ุฅุฑุฌุงุน ูุงุฆูุฉ ุงูุญููุงูุงุช
app.get('/api/animals', (req, res) => {
  fs.readFile(animalsPath, 'utf8', (err, data) => {
    if (err) {
      console.error('โ ูุดู ูู ูุฑุงุกุฉ animal.json:', err);
      return res.status(500).json({ error: 'ุฎุทุฃ ูู ูุฑุงุกุฉ ุจูุงูุงุช ุงูุญููุงูุงุช' });
    }

    try {
      const animals = JSON.parse(data || '[]');
      res.status(200).json(animals);
    } catch (e) {
      console.error('โ JSON ุบูุฑ ุตุงูุญ:', e);
      res.status(500).json({ error: 'ุจูุงูุงุช ุบูุฑ ุตุงูุญุฉ' });
    }
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`โ ุงูุณูุฑูุฑ ูุนูู ุนูู http://localhost:${PORT}`);
});
